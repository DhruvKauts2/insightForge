services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: logflow-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - logflow-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: logflow-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - logflow-network

  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: logflow-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - logflow-network

  kibana:
    image: kibana:8.11.1
    container_name: logflow-kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - logflow-network

  postgres:
    image: postgres:16-alpine
    container_name: logflow-postgres
    environment:
      POSTGRES_USER: logflow
      POSTGRES_PASSWORD: logflow123
      POSTGRES_DB: logflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-schema.sql:/docker-entrypoint-initdb.d/01-init-schema.sql
    networks:
      - logflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logflow -d logflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: logflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logflow-network
    command: redis-server --appendonly yes

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: logflow-api
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    networks:
      - logflow-network
    restart: unless-stopped

  alerting:
    build:
      context: .
      dockerfile: Dockerfile.alerting
    container_name: logflow-alerting
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    env_file:
      - .env.docker
    networks:
      - logflow-network
    restart: unless-stopped

volumes:
  es_data:
  postgres_data:
  redis_data:

networks:
  logflow-network:
    driver: bridge
